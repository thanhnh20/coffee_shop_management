// <auto-generated />
using System;
using CafeManagement.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeManagement.Infrastructure.Migrations
{
    [DbContext(typeof(CoffeeShopManagementContext))]
    [Migration("20230224065359_DbAlter02")]
    partial class DbAlter02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Username")
                        .HasName("PK__Account__F3DBC573CC67DD41");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.CategoryProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1F82C89AA82");

                    b.ToTable("Category_Product", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Customer", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Address")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("address")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PhoneNumber")
                        .HasName("PK__Customer__4849DA006E08C1C1");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ingredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("unit");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.IngredientProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredientID");

                    b.Property<int>("Mass")
                        .HasColumnType("int")
                        .HasColumnName("mass");

                    b.HasKey("ProductId", "IngredientId")
                        .HasName("PK__Ingredie__4F65EB2601D4E7FD");

                    b.HasIndex("IngredientId");

                    b.ToTable("Ingredient_Product", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("date")
                        .HasColumnName("dateOrder");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.Property<int>("StatusOrderId")
                        .HasColumnType("int")
                        .HasColumnName("statusOrderID");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("StaffId");

                    b.HasIndex("StatusOrderId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("totalPrice");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__Order_De__BAD83E69228683BE");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Detail", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("Payment_Method", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("image");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productName");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime>("DateJoin")
                        .HasColumnType("date")
                        .HasColumnName("dateJoin");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullname");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phoneNumber");

                    b.Property<double?>("Salary")
                        .HasColumnType("float")
                        .HasColumnName("salary");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("taxCode")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("StaffId");

                    b.HasIndex(new[] { "Username" }, "UQ__Staff__F3DBC572DD48F397")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.StatusOrder", b =>
                {
                    b.Property<int>("StatusOrderId")
                        .HasColumnType("int")
                        .HasColumnName("statusOrderID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("StatusOrderId");

                    b.ToTable("Status_Order", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("storageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"), 1L, 1);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("ingredientID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("StorageId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Account", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ROLEID_ACCOUNT");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.IngredientProduct", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientProducts")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_INGREDIENT_ID_INGREDIENT_PRODUCT");

                    b.HasOne("CafeManagement.Infrastructure.Models.Product", "Product")
                        .WithMany("IngredientProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCT_ID_INGREDIENT_PRODUCT");

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Order", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_PAYMENT_METHOD_ID_ORDERR");

                    b.HasOne("CafeManagement.Infrastructure.Models.Customer", "PhoneNumberNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PhoneNumber")
                        .IsRequired()
                        .HasConstraintName("FK_PHONENUMBER_ORDER");

                    b.HasOne("CafeManagement.Infrastructure.Models.staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_STAFFID_ORDERR");

                    b.HasOne("CafeManagement.Infrastructure.Models.StatusOrder", "StatusOrder")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_STATUS_ORDER_ID_ORDERR");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PhoneNumberNavigation");

                    b.Navigation("Staff");

                    b.Navigation("StatusOrder");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.OrderDetail", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_ID_ORDER_DETAIL");

                    b.HasOne("CafeManagement.Infrastructure.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PRODUCT_ID_ORDER_DETAIL");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Product", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.CategoryProduct", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CATEGORYID_PRODUCT");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.staff", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.Account", "UsernameNavigation")
                        .WithOne("staff")
                        .HasForeignKey("CafeManagement.Infrastructure.Models.staff", "Username")
                        .HasConstraintName("FK_USERNAME_STAFF");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Storage", b =>
                {
                    b.HasOne("CafeManagement.Infrastructure.Models.Ingredient", "Ingredient")
                        .WithMany("Storages")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_INGREDIENT_ID_STORAGE");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Account", b =>
                {
                    b.Navigation("staff");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.CategoryProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Ingredient", b =>
                {
                    b.Navigation("IngredientProducts");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Product", b =>
                {
                    b.Navigation("IngredientProducts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.staff", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeManagement.Infrastructure.Models.StatusOrder", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
